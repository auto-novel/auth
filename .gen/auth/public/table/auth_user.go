//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthUser = newAuthUserTable("public", "auth_user", "")

type authUserTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Username  postgres.ColumnString
	Email     postgres.ColumnString
	Role      postgres.ColumnString
	Password  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	LastLogin postgres.ColumnTimestampz
	Attr      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AuthUserTable struct {
	authUserTable

	EXCLUDED authUserTable
}

// AS creates new AuthUserTable with assigned alias
func (a AuthUserTable) AS(alias string) *AuthUserTable {
	return newAuthUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthUserTable with assigned schema name
func (a AuthUserTable) FromSchema(schemaName string) *AuthUserTable {
	return newAuthUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthUserTable with assigned table prefix
func (a AuthUserTable) WithPrefix(prefix string) *AuthUserTable {
	return newAuthUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthUserTable with assigned table suffix
func (a AuthUserTable) WithSuffix(suffix string) *AuthUserTable {
	return newAuthUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthUserTable(schemaName, tableName, alias string) *AuthUserTable {
	return &AuthUserTable{
		authUserTable: newAuthUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAuthUserTableImpl("", "excluded", ""),
	}
}

func newAuthUserTableImpl(schemaName, tableName, alias string) authUserTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UsernameColumn  = postgres.StringColumn("username")
		EmailColumn     = postgres.StringColumn("email")
		RoleColumn      = postgres.StringColumn("role")
		PasswordColumn  = postgres.StringColumn("password")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		LastLoginColumn = postgres.TimestampzColumn("last_login")
		AttrColumn      = postgres.StringColumn("attr")
		allColumns      = postgres.ColumnList{IDColumn, UsernameColumn, EmailColumn, RoleColumn, PasswordColumn, CreatedAtColumn, LastLoginColumn, AttrColumn}
		mutableColumns  = postgres.ColumnList{UsernameColumn, EmailColumn, RoleColumn, PasswordColumn, CreatedAtColumn, LastLoginColumn, AttrColumn}
		defaultColumns  = postgres.ColumnList{CreatedAtColumn, LastLoginColumn, AttrColumn}
	)

	return authUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Username:  UsernameColumn,
		Email:     EmailColumn,
		Role:      RoleColumn,
		Password:  PasswordColumn,
		CreatedAt: CreatedAtColumn,
		LastLogin: LastLoginColumn,
		Attr:      AttrColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
